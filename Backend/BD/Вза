swagger: '2.0'
info:
  description: |
    This is a sample Petstore server.  You can find 
    out more about Swagger at 
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: login
  description: Вход пользователя
- name: flat
  description: Выдать информацию по квартирам
- name: metrics
  description: Взаимодействие с счетчиками
- name: payment
  description: Взаимодействие с оплатой
# schemes:
# - http
paths:
  
  /login/user:
    post:
      tags:
      - login
      summary: Авторизация зарегистрированного пользователя
      operationId: loginUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Авторизация пользователя
        required: true
        schema:
          $ref: '#/definitions/LoginUser'
      responses:
        200:
          description: Успешная авторизация
          schema:
              $ref: '#/definitions/SuccessfulLoginUser'
        405:
          description: Неккорекно введены данные
  /login/quick:
    post:
      tags:
      - login
      summary: Авторизация для быстрой регистрации
      description: Авторизация для быстрой регистрации
      operationId: loginQuickUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Авторизация пользователя
        required: true
        schema:
          $ref: '#/definitions/QuickLoginUser'

      responses:
        200:
          description: Успешная авторизация
          schema:
              $ref: '#/definitions/SuccessfulLoginUser'
        400:
          description: Invalid status value
  /flat/{userId}:
    get:
      tags:
      - flat
      summary: Поиск квартир по id пользователя
      description: Возвращает массив квартир
      operationId: getFlatList
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: ID юзвера
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Успешный запрос
          schema:
            type: array
            items:
              $ref: '#/definitions/Flat'
        400:
          description: Ошибка на сервере
        404:
          description: Не найдено квартир
      security:
      - api_key: []
    
  /metrics/{flatId}:
    get:
      tags:
      - metrics
      summary: Список счетчиков привязанных к квартире
      operationId: getMetricsList
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: flatId
        in: path
        description: ID квартиры
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Metric'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /metrics/update:
    put:
      tags:
      - metrics
      summary: Запись текущих показаний счетчика
      description: Запись текущих показаний
      operationId: writeCurrentValue
      consumes:
      - application/json
      produces:
      - multipart/form-data
      parameters:
      - in: body
        name: body
        description: Показания счетчика
        required: true
        schema:
          $ref: '#/definitions/CurrentMetric'
      responses:
        200:
          description: Успешно обновленно
        404:
          description: Нет такого счетчика или пользователя
      security:
      - api_key: []
  /payment/metrics:
    post:
      tags:
      - payment
      summary: Оплата счетчиков
      operationId: paymentMetricsList
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Массив счетчиков для оплаты
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/Payment'
      responses:
        200:
          description: Оплата прошла успешно, выдать квинтацию
          schema:
            type: array
            items:
              $ref: '#/definitions/ItemPaymentHistory'
        400:
          description: Ошибка при оплате
  /payment/history:
    get:
      tags:
      - payment
      summary: Выдает историю платежей по ID пользователя
      description: История платежей
      operationId: getPaymentHistory
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Массив счетчиков для оплаты
        required: true
        schema:
          $ref: '#/definitions/InformationAboutPayment'
      responses:
        200:
          description: Выдаст историю платежей
          schema:
            type: array
            items:
              $ref: '#/definitions/ItemPaymentHistory'
        400:
          description: Неккорекнтые данные
        404:
          description: Не найдены платежи для данного пользователя
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Metric:
    type: object
    properties:
      id:
        type: integer
        format: int64
      balance:
        type: integer
        format: int64
      prevValue:
        type: integer
        format: int32
      currValue:
        type: integer
        format: int32
      tariff:
        type: integer
        format: int32
      typeMetric:
        type: string
        enum:
        - electric
        - water
        - gas
        - heating
  QuickLoginUser:
    type: object
    properties:
      email:
        type: string
  LoginUser:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  SuccessfulLoginUser:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
        format: int64
      token:
        type: string
  InformationAboutPayment:
    type: object
    properties:
      idUser:
        type: integer
        format: int64
      dataWith:
        type: string
        format: "date-time"
      dataTo:
        type: string
        format: "date-time"
  ItemPaymentHistory:
    type: object
    properties:
      id:
        type: integer
        format: int64
      date:
        type: string
        format: "date-time"
      nameUser:
        type: string
      cost:
        type: number
      prevValue:
        type: integer
        format: int64
      curValue:
        type: integer
        format: int64
  Payment:
    type: object
    properties:
      idUser:
        type: integer
        format: int64
      idMetric:
        type: integer
        format: int64
      cost:
        type: number
  CurrentMetric:
    type: object
    properties:
      id:
        type: integer
        format: int64
      idUser:
        type: integer
        format: int64
      nameUser:
        type: string
      currentValue:
        type: integer
        format: int64
  Flat:
    type: object
    properties:
      id:
        type: integer
        format: int64
      address:
        type: string

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /TNTrol/taras_p/1.0.0
schemes:
 - https
 - http
